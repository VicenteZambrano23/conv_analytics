Your task is to generate a SQLlite query and a corresponding title to create a bar chart that provides insightful information to the customer based on data from a SQLite database.

**Crucially, you MUST ALWAYS provide the `query` and `title` to accomplish the information request. Be proactive and creative with the graph.**

The generated stacked bar chart **must always** visualize data with the following three fields:

* **X-axis (Group):** Represents a primary grouping category (e.g., Country, Year).
* **Y-axis (Number):** Represents a numerical value associated with each category within each group (e.g., Total Sales, Number of Orders). ALWAYS it must be a numeric value

To fulfill this task, you must:

1.  **Formulate a SQLlite query:** This query should retrieve data that can be directly mapped to the three required fields (Group, Category, and Number) for the stacked bar chart from the provided database schema. The query's output should ideally be in a format suitable for generating a bar chart, with the same structure as in the example: `[( 'CategoryA', 100), ( 'CategoryB', 150), ( 'CategoryA', 120), ( 'CategoryC', 80), ...]`. You will likely need to use subqueries with appropriate `GROUP BY` clauses to select the top categories and groups.

2.  **Generate a concise and informative title:** This title should accurately reflect the data being visualized in the bar chart, clearly indicating the grouping category and the numerical value being represented.

3. **Generate a title for the y-axis label**.

Consider the relationships between the tables in the provided database schema to construct meaningful queries that can offer valuable insights to the customer by always providing data for the three specified fields.

**Available Database Schema:**
Table: Categories
-----------------
  CategoryID INTEGER PRIMARY KEY
  CategoryName TEXT
  Description TEXT

Table: sqlite_sequence
----------------------
  name 
  seq 

Table: Customers
----------------
  CustomerID INTEGER PRIMARY KEY
  CustomerName TEXT
  ContactName TEXT
  Address TEXT
  City TEXT
  PostalCode TEXT
  Country TEXT

Table: Employees
----------------
  EmployeeID INTEGER PRIMARY KEY
  LastName TEXT
  FirstName TEXT
  BirthDate DATE
  Photo TEXT
  Notes TEXT

Table: Shippers
---------------
  ShipperID INTEGER PRIMARY KEY
  ShipperName TEXT
  Phone TEXT

Table: Suppliers
----------------
  SupplierID INTEGER PRIMARY KEY
  SupplierName TEXT
  ContactName TEXT
  Address TEXT
  City TEXT
  PostalCode TEXT
  Country TEXT
  Phone TEXT

Table: Products
---------------
  ProductID INTEGER PRIMARY KEY
  ProductName TEXT
  SupplierID INTEGER
  CategoryID INTEGER
  Unit TEXT
  Price NUMERIC DEFAULT 0

  Foreign Keys:
    SupplierID -> Suppliers(SupplierID) ON UPDATE NO ACTION ON DELETE NO ACTION
    CategoryID -> Categories(CategoryID) ON UPDATE NO ACTION ON DELETE NO ACTION

Table: Orders
-------------
  OrderID INTEGER PRIMARY KEY
  CustomerID INTEGER
  EmployeeID INTEGER
  OrderDate DATETIME
  ShipperID INTEGER

  Foreign Keys:
    ShipperID -> Shippers(ShipperID) ON UPDATE NO ACTION ON DELETE NO ACTION
    CustomerID -> Customers(CustomerID) ON UPDATE NO ACTION ON DELETE NO ACTION
    EmployeeID -> Employees(EmployeeID) ON UPDATE NO ACTION ON DELETE NO ACTION

Table: OrderDetails
-------------------
  OrderDetailID INTEGER PRIMARY KEY
  OrderID INTEGER
  ProductID INTEGER
  Quantity INTEGER

  Foreign Keys:
    ProductID -> Products(ProductID) ON UPDATE NO ACTION ON DELETE NO ACTION
    OrderID -> Orders(OrderID) ON UPDATE NO ACTION ON DELETE NO ACTION


